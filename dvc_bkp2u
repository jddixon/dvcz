#!/usr/bin/python3
#
# ~/dev/py/dvcz/dvc_bkp1u

"""
Create a project BuildList and post project files to a content-keyed store.

If we are not in a project directory (one with a .dvcz/ subdirectory) we
search upward to find one and then make that our working directory.  

XXX BEING HACKED FROM dvc_bkp2u
"""

import os
import sys

from argparse import ArgumentParser

from xlattice import (check_using_sha, parseUsingSHA, fix_using_sha,
                      show_using_sha)

from xlattice.util import get_exclusions, timestamp_now
from buildlist import(__version__, __version_date__, __file__,
                      BuildList,
                      check_dirs_in_path, generate_rsa_key, rm_f_dir_contents)


def doit(options):
    """
    Given the command-line options, create the BuildList.

    Optionally serialize the BuildList, append to a log, and populate
    the content-keyed store using the selected SHA hash type.
    """
    data_dir = options.data_dir
    dvcz_dir = options.dvcz_dir
    excl = options.excl
    key_file = options.key_file
    list_file = options.list_file
    logging = options.logging
    title = options.title
    u_path = options.u_path      # if None, don't save to u_path
    using_sha = options.using_sha

    blist = BuildList.list_gen(title, data_dir, dvcz_dir, list_file, key_file,
                               excl, logging, u_path, using_sha)

    print("BuildList written to %s" % os.path.join(dvcz_dir, list_file))

    # confirm that whatever is in the BuildList is now in u_path
    if u_path:
        unmatched = blist.tree.check_in_u_dir(u_path)
        if unmatched:
            for unm in unmatched:
                print("NOT IN UDIR: ", unm)


def get_args():
    """ Collect command-line arguments. """

    now = timestamp_now()
    app_name = 'dvc_bkp2u %s' % __version__
    key_path = os.path.join(os.environ['DVCZ_PATH_TO_KEYS'], 'skPriv.pem')

    # parse the command line ----------------------------------------

    desc = 'generate build list for directory, optionally populating u_path'
    parser = ArgumentParser(description=desc)

    parser.add_argument('-b', '--list_file', default='lastBuildList',
                        help='path to build list')

    parser.add_argument('-D', '--dvcz_dir', default='.dvcz',
                        help='dvcz directory (default=.dvcz)')

    parser.add_argument('-d', '--data_dir', default='.',
                        help='data directory for build list (default=./)')

    parser.add_argument('-i', '--ignore_file', default='.dvczignore',
                        help='file containing wildcards (globs) for files to ignore')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')

    parser.add_argument('-k', '--key_file', default=key_path,
                        help='path to RSA private key for signing')

    parser.add_argument('-L', '--logging', action='store_true',
                        help="append timestamp and BuildList hash to to .dvcz/builds")

    # NOT CURRENTLY SUPPORTED (may never be)
    parser.add_argument('-M', '--matchPat', action='append',
                        help='include only files matching this pattern')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-t', '--title',
                        help='title for build list')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='display version number and exit')

    # -1,-2,-3, using_sha, -v/--verbose
    parseUsingSHA(parser)

    parser.add_argument('-X', '--exclusions', action='append',
                        help='do not include files/directories matching this pattern')

    args = parser.parse_args()

    if args.showVersion:
        print(app_name)
        sys.exit(0)

    args.app_name = app_name
    args.now = now
    return parser, args

def dvc_get_project(args):
    # XXX THIS BELONGS IN THE LIBRARY
    proj_name = 'UNKNOWN_PROJECT'
    proj_dir  = 'UNKNOWN_PATH'
    start_dir = os.getcwd()
    curdir = start_dir

    while True:
        above, sep, proj_name = curdir.rpartition('/')    # parse path 
        if sep != '/':
            print("invalid working directory: '%s'" % curdir)
            sys.exit(1)
        if os.path.exists(os.path.join(curdir, '.dvcz')):
            # we have a .dvcz subdirectory, so this is a project directory
            proj_dir = curdir
            os.chdir(proj_dir)
            break
        # otherwise we need to loop
        curdir = above
        
    if proj_name.startswith('UNKNOWN') or proj_dir.startswith('UNKNOWN'):
        print("unable to determine project name or directory")
        sys.exit(1)

    if curdir == os.environ['HOME']:
        print("no project directory found above %s" % start_dir)
        sys.exit(0)

    args.proj_name = proj_name
    args.proj_dir = proj_dir
    # DEBUG
    print("project: %s; project directory: %s" % (proj_name, proj_dir))
    # END

def check_args(parser, args):
    """ Check and possibly edit command-line arguments. """

    fix_using_sha(args)

    args.curDir = os.getcwd()
    if os.path.exists(args.ignore_file):
        args.excl = get_exclusions(args.curDir)
    else:
        print("WARNING: ignore file '%s' NOT FOUND" % args.ignore_file)
        args.excl = []
    if not 'build' in args.excl:
        args.excl.append('build')

    if args.exclusions:
        args.excl.extend(args.exclusions)

    if args.testing:
        args.dvcz_dir = os.path.join('tmp/dvcz')
        if os.path.exists(args.dvcz_dir):
            rm_f_dir_contents(args.dvcz_dir)      # empties the directory
    os.makedirs(args.dvcz_dir, 0o755, exist_ok=True)
    # WE HAVE args.dvcz_dir

    # sanity checks -------------------------------------------------
    if not args.just_show:
        check_using_sha(args.using_sha)

        if (not args.data_dir) or (args.data_dir == ''):
            print("no root directory specified")
            parser.print_usage()
            sys.exit(1)

        if not os.path.isdir(args.data_dir):
            print("root directory '%s' isn't a directory" % args.data_dir)
            parser.print_usage()        # short form
            # parser.print_help()       # long form (what you get from -h)
            sys.exit(1)

        if args.testing:
            args.key_file = os.path.join(args.dvcz_dir, 'skPriv.pem')
        if not os.path.exists(args.key_file):
            check_dirs_in_path(args.key_file)
            if args.testing:
                generate_rsa_key(args.key_file, 1024)
            else:
                generate_rsa_key(args.key_file, 2048)

    # u_path ------------------------------------------------
    if args.testing and args.u_path:
        if args.u_path[0] == '/':
            args.u_path = args.u_path[1:]
        args.u_path = os.path.join('tmp', args.u_path)
        if os.path.exists(args.u_path):
            rm_f_dir_contents(args.u_path)

    if args.u_path:
        os.makedirs(args.u_path, 0o755, exist_ok=True)

    # title -----------------------------------------------
    if args.data_dir:
        if not args.title or args.title == '':
            _, _, base = args.data_dir.rpartition('/')
            args.title = base
        else:
            # this can contain spaces and other undesirable characters
            base = args.title
    args.title = str(args.title)


def show_args(args):
    """ Maybe show options and such. """
    if args.verbose or args.just_show:
        print("%s %s" % (args.app_name, __version_date__))

    if args.verbose or args.just_show:
        print('data_dir     = ' + str(args.data_dir))
        print('dvcz_dir     = ' + str(args.dvcz_dir))
        print('excl         = ' + str(args.excl))
        print('exclusions   = ' + str(args.exclusions))
        print('ignore_file  = ' + str(args.ignore_file))
        print('just_show    = ' + str(args.just_show))
        print('key_file     = ' + str(args.key_file))
        print('list_file    = ' + str(args.list_file))
        print('logging      = ' + str(args.logging))
        print('proj_dir     = ' + str(args.proj_dir))
        print('proj_name    = ' + str(args.proj_name))
        print('timestamp    = ' + str(args.now))
        print('testing      = ' + str(args.testing))
        print('title        = ' + str(args.title))
        print('u_path       = ' + str(args.u_path))
        show_using_sha(args)

        if args.matchPat and len(args.matchPat) > 0:
            print("match:")
            for match in args.matchPat:
                print("    %s" % match)

    if args.just_show:
        sys.exit(0)


def main():
    """
    Collect comamnd line options and execute the command if required.
    """

    parser, args = get_args()
    dvc_get_project(args)               # and possibly change working directory
    check_args(parser, args)
    show_args(args)

    # do what's required --------------------------------------------

    # try: ACQUIRE LOCK ON PROJECT, that is, on the name of the project
    doit(args)

    # finally: RELEASE LOCK ON PROJECT

if __name__ == '__main__':
    main()
