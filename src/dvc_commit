#!/usr/bin/python3
#
# ~/dev/py/dvcz/dvc_commit

"""
Create a project BuildList and post project files to the committer's
subdirectory of in/ in DVCZ's content-keyed store.  That is, this does
a commit to a local repository, one on the same host.

If we are not in a project directory (one with a .dvcz/ subdirectory) we
search upward to find one and then make that our working directory except
that $HOME is not an acceptable project directory.

The BuildList created is written to .dvcz/lastBuildList in the project
directory.  The commit is logged by appending a single line to
.dvcz/builds.  That line looks like
    CCYY-MM-DD HH:MM:SS vN.N.N HASH
where the first two fields are the UTC timestamp.  This is followed by the
three or four-part decimal version number vN.N.N, where N represents
a decimal number in the range 0..255 inclusive.  The HASH field is the
hash of the contents of the BuildList, its content key, in hexadecimal
form.  If SHA1 is used for the hash, the hash consists of 40 characters;
if SHA2, SHA3, or blake2b is used, it is 64 hex characters long.

"""

import os
import sys
from argparse import ArgumentParser

from buildlist import(BuildList,
                      check_dirs_in_path, generate_rsa_key, rm_f_dir_contents)
from optionz import dump_options
from xlattice import (check_hashtype, parse_hashtype_etc, fix_hashtype)
from xlattice.util import get_exclusions, timestamp_now
from dvcz import(__version__, __version_date__)
from dvcz.project import get_proj_info


def doit(options):
    """
    Given the command-line options, create the BuildList.

    Serialize the BuildList, append its hash to a log, and populate
    the content-keyed store using the selected SHA hash type.

    """
    # parent_path = options.parent_path
    dest_dvcz_path = options.dest_dvcz_path
    excl = options.excl
    key_path = options.key_path
    list_file = options.list_file
    u_path = options.u_path
    hashtype = options.hashtype

    blist = BuildList.list_gen(options.proj_name, options.proj_path,
                               dest_dvcz_path, list_file, key_path, excl,
                               True,  # logging=True
                               u_path, hashtype)

    print("BuildList written to %s" % os.path.join(dest_dvcz_path, list_file))

    # confirm that whatever is in the BuildList is now in u_path
    if u_path:
        unmatched = blist.tree.check_in_u_dir(u_path)
        if unmatched:
            for unm in unmatched:
                print("NOT IN UDIR: ", unm)


def get_args():
    """ Collect command-line arguments. """

    now = timestamp_now()
    app_name = 'dvc_commit %s' % __version__

    # parse the command line ----------------------------------------

    desc = 'generate build list for directory, optionally populating u_path'
    parser = ArgumentParser(description=desc)

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')

    # NOT CURRENTLY SUPPORTED (may never be)
    parser.add_argument('-M', '--match_pat', action='append',
                        help='include only files matching this pattern')

    parser.add_argument('-p', '--proj_path', default=os.getcwd(),
                        help='data directory for build list (default=../)')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='display version number and exit')

    # -1,-2,-3, hashtype, -v/--verbose
    parse_hashtype_etc(parser)

    parser.add_argument(
        '-X', '--exclusions', action='append',
        help='do not include files/directories matching this pattern')

    args = parser.parse_args()

    if args.showVersion:
        print(app_name)
        sys.exit(0)

    args.app_name = app_name
    args.now = now
    return parser, args


def check_sanity(parser, args):
    """ check for options that just don't make sense. """

    if not args.just_show:
        check_hashtype(args.hashtype)

        if (not args.proj_path) or (args.proj_path == ''):
            print("no proj_path (project path) specified")
            parser.print_usage()
            sys.exit(1)

        if not os.path.isdir(args.proj_path):
            print("data directory '%s' isn't a directory" % args.proj_path)
            parser.print_usage()        # short form
            # parser.print_help()       # long form (what you get from -h)
            sys.exit(1)

        if args.testing:
            args.key_path = os.path.join(
                'tmp', os.path.join(
                    'home', os.path.join('node', 'skPriv.pem')))

        else:
            args.key_path = os.path.join(
                os.environ['HOME'],
                args.path.join('node', 'skPriv.pem'))

        if not os.path.exists(args.key_path):
            check_dirs_in_path(args.key_path)
            if args.testing:
                generate_rsa_key(args.key_path, 1024)
            else:
                generate_rsa_key(args.key_path, 2048)


def add_derived(args):
    """
    Wired-in paths.

    Arrive here with args.proj_path known and known to be a directory.
    """

    proj_path = args.proj_path

    # Determine the path to project .dvcz ---------------------------
    src_dvcz_path = os.path.abspath(os.path.join(proj_path, '.dvcz'))

    # If necessary search upward for a .dvcz directory; if it's
    # $HOME/.dvcz or /.dvcz, complain and take an error exit

    # At this point we have a path to the .dvcz we get data from
    args.src_dvcz_path = src_dvcz_path

    if args.testing:
        # we are guaranteed to be in the project directory
        args.dest_dvcz_path = os.path.join('tmp', 'dvcz')
    else:
        args.dest_dvcz_path = args.src_dvcz_path

    # Get the project's version number ------------------------------
    proj_version_path = os.path.join(src_dvcz_path, 'version')
    if not os.path.exists(proj_version_path):
        print("%s does not exist -- cannot continue" % proj_version_path)
        sys.exit(1)
    with open(proj_version_path, 'r') as file:
        proj_version = file.read()

    # Extract the project name and  from that the BuildList's title -

    # we calculate the project name from src_dvcz_path
    proj_path_parts = src_dvcz_path.split('/')
    args.proj_name = proj_path_parts[-2]
    args.parent_path = '/'.join(proj_path_parts[:-2])
    # DEBUG
    print("SRC_DVCZ_PATH:  %s" % args.src_dvcz_path)
    print("DEST_DVCZ_PATH: %s" % args.dest_dvcz_path)
    print("PARTS:          %s" % str(proj_path_parts))
    print("PROJ_NAME:      %s" % args.proj_name)
    print("PARENT_PATH:    %s" % args.parent_path)
    print("PROJ VERSION:   %s" % proj_version)
    # END

    # Other things in .dvcz: ----------------------------------------
    args.ignore_file = os.path.join(proj_path, '.dvczignore')
    args.list_file = 'lastBuildList'

    # And things elsewhere ------------------------------------------
    args.key_path = os.path.join(
        os.environ['HOME'], os.path.join(
            '.dvcz', os.path.join('node', 'skPriv.pem')))


def check_args(parser, args):
    """ Check and possibly edit command-line arguments. """

    add_derived(args)
    fix_hashtype(args)

    args.cur_dir = os.getcwd()
    if os.path.exists(args.ignore_file):
        args.excl = get_exclusions(args.cur_dir)
    else:
        print("WARNING: ignore file '%s' NOT FOUND" % args.ignore_file)
        args.excl = []
    if not 'build' in args.excl:
        args.excl.append('build')

    if args.exclusions:
        args.excl.extend(args.exclusions)

    if args.testing:
        args.dest_dvcz_path = os.path.join('tmp/dvcz')
        if os.path.exists(args.dest_dvcz_path):
            rm_f_dir_contents(args.dest_dvcz_path)      # empties the directory

    os.makedirs(args.dest_dvcz_path, 0o755, exist_ok=True)

    check_sanity(parser, args)

    # u_path ------------------------------------------------
    if args.testing:
        args.u_path = os.path.join('tmp', 'U')
        # if os.path.exists(args.u_path):
        #    rm_f_dir_contents(args.u_path)
        os.makedirs(args.u_path, 0o755, exist_ok=True)

    # OTHERWISE args.u_path MUST BE SPECIFIED AND MUST EXIST

    if args.u_path:
        os.makedirs(args.u_path, 0o755, exist_ok=True)

    # committer and in_path -------------------------------

    # The directory at u_path is known to exist.  We are committing to
    # a committer-specific subdirectory, u_path/in/ID, where ID is a
    # 40- or 64-char hex value, the committer's ID.


def show_args(args):
    """
    Conditionally display sorted option names and values.

    Where the option value is list, display the value separately
    under the capitalized option name.
    """
    if args.verbose or args.just_show:
        print("%s %s\n" % (args.app_name, __version_date__))
        print(dump_options(args))

    if args.just_show:
        sys.exit(0)


def main():
    """
    Collect comamnd line options and execute the command if required.
    """

    basedir = os.getcwd()
    try:
        parser, args = get_args()
        get_proj_info(args)      # and possibly change working directory
        check_args(parser, args)
        show_args(args)

        # do what's required --------------------------------------------

        # try: ACQUIRE LOCK ON PROJECT, that is, on the name of the project
        doit(args)

        # finally: RELEASE LOCK ON PROJECT

    finally:
        os.chdir(basedir)


if __name__ == '__main__':
    main()
